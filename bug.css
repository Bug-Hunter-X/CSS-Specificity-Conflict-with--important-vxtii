The following CSS code snippet exhibits an unusual issue related to specificity and inheritance:

```css
.parent {
  color: blue;
}

.child {
  color: red !important;
}

.parent .child {
  color: green;
}
```

In this example, you might expect the `.parent .child` rule to override the `.child` rule due to its higher specificity.  However, the `!important` declaration in the `.child` rule prevents this.  The unexpected behavior is that even though the specificity of `.parent .child` is higher, the `!important` declaration overrides it, resulting in red text. This behavior might be considered a bug in some scenarios, especially if developers are not aware of this level of specificity interaction.

Another issue is that the use of `!important` can lead to unexpected behavior if not used carefully. It overrides the CSS cascade, can complicate debugging and maintenance, and can lead to conflicts when different parts of the CSS stylesheet, or external libraries, use it.